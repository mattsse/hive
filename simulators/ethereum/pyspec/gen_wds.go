// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*withdrawalsUnmarshaling)(nil)

// MarshalJSON marshals as JSON.
func (w withdrawals) MarshalJSON() ([]byte, error) {
	type withdrawals struct {
		Index          math.HexOrDecimal64 `json:"index"`
		ValidatorIndex math.HexOrDecimal64 `json:"validatorIndex"`
		Address        common.Address      `json:"address"`
		Amount         math.HexOrDecimal64 `json:"amount"`
	}
	var enc withdrawals
	enc.Index = math.HexOrDecimal64(w.Index)
	enc.ValidatorIndex = math.HexOrDecimal64(w.ValidatorIndex)
	enc.Address = w.Address
	enc.Amount = math.HexOrDecimal64(w.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (w *withdrawals) UnmarshalJSON(input []byte) error {
	type withdrawals struct {
		Index          *math.HexOrDecimal64 `json:"index"`
		ValidatorIndex *math.HexOrDecimal64 `json:"validatorIndex"`
		Address        *common.Address      `json:"address"`
		Amount         *math.HexOrDecimal64 `json:"amount"`
	}
	var dec withdrawals
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Index != nil {
		w.Index = uint64(*dec.Index)
	}
	if dec.ValidatorIndex != nil {
		w.ValidatorIndex = uint64(*dec.ValidatorIndex)
	}
	if dec.Address != nil {
		w.Address = *dec.Address
	}
	if dec.Amount != nil {
		w.Amount = uint64(*dec.Amount)
	}
	return nil
}
